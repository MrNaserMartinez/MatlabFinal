function SecanteGui()
    fig = uifigure('Name', 'Método de la Secante', ...
                   'Position', [100, 100, 1280, 720], ...
                   'Color', [0.1, 0.1, 0.1]);

    % Barra superior azul y título
    uipanel(fig, 'Position', [0, 670, 1280, 50], ...
            'BackgroundColor', [0.22, 0.51, 0.78], 'BorderType', 'none');
    uilabel(fig, 'Text', 'MÉTODO DE LA SECANTE', ...
        'Position', [0, 670, 1280, 50], ...
        'FontSize', 26, 'FontWeight', 'bold', ...
        'HorizontalAlignment', 'center', ...
        'BackgroundColor', 'none', ...
        'FontColor', 'white');

    % Panel de explicación
    panel_explicacion = uipanel(fig, 'Title', 'EXPLICACIÓN DEL MÉTODO', ...
        'Position', [30, 600, 1220, 60], ...
        'FontSize', 14, 'FontWeight', 'bold', ...
        'BackgroundColor', [0.13, 0.13, 0.13], ...
        'ForegroundColor', [0.3, 0.6, 1]);
    texto_explicacion = uitextarea(panel_explicacion, ...
        'Position', [10, 10, 1200, 30], ...
        'Editable', 'off', ...
        'FontSize', 12, ...
        'FontColor', 'white', ...
        'BackgroundColor', [0.18, 0.18, 0.18], ...
        'Value', {'Ingrese la función y los parámetros para calcular la raíz usando el método de la secante.'});

    % Panel de ingreso de datos
    panel_datos = uipanel(fig, 'Title', 'INGRESO DE DATOS', ...
        'Position', [30, 300, 600, 210], ...
        'FontSize', 14, 'FontWeight', 'bold', ...
        'BackgroundColor', [0.13, 0.13, 0.13], ...
        'ForegroundColor', [0.3, 0.6, 1]);

    campos = {};
    y = 160; dy = 40;
    campos{1} = uilabel(panel_datos, 'Text', 'Función f(x):', ...
        'Position', [20, y, 120, 25], 'FontColor', 'white');
    campos{2} = uieditfield(panel_datos, 'text', ...
        'Position', [150, y, 300, 25], 'Value', 'x^3-x-2', ...
        'FontColor', 'white', 'BackgroundColor', [0.2, 0.2, 0.2]);
    y = y - dy;
    campos{3} = uilabel(panel_datos, 'Text', 'x0:', ...
        'Position', [20, y, 120, 25], 'FontColor', 'white');
    campos{4} = uieditfield(panel_datos, 'numeric', ...
        'Position', [150, y, 100, 25], 'Value', 1, ...
        'FontColor', 'white', 'BackgroundColor', [0.2, 0.2, 0.2]);
    y = y - dy;
    campos{5} = uilabel(panel_datos, 'Text', 'x1:', ...
        'Position', [20, y, 120, 25], 'FontColor', 'white');
    campos{6} = uieditfield(panel_datos, 'numeric', ...
        'Position', [150, y, 100, 25], 'Value', 2, ...
        'FontColor', 'white', 'BackgroundColor', [0.2, 0.2, 0.2]);
    y = y - dy;
    campos{7} = uilabel(panel_datos, 'Text', 'Tolerancia:', ...
        'Position', [20, y, 120, 25], 'FontColor', 'white');
    campos{8} = uieditfield(panel_datos, 'numeric', ...
        'Position', [150, y, 100, 25], 'Value', 1e-6, ...
        'FontColor', 'white', 'BackgroundColor', [0.2, 0.2, 0.2]);
    y = y - dy;
    campos{9} = uilabel(panel_datos, 'Text', 'Máx. iteraciones:', ...
        'Position', [20, y, 120, 25], 'FontColor', 'white');
    campos{10} = uieditfield(panel_datos, 'numeric', ...
        'Position', [150, y, 100, 25], 'Value', 50, ...
        'FontColor', 'white', 'BackgroundColor', [0.2, 0.2, 0.2]);

    btn_calcular = uibutton(panel_datos, 'Text', 'CALCULAR', ...
        'Position', [300, 10, 120, 30], ...
        'FontSize', 12, 'FontWeight', 'bold', ...
        'BackgroundColor', [0.3, 0.7, 0.3], ...
        'FontColor', 'white', ...
        'ButtonPushedFcn', @(btn,event) calcular());

    % Panel de resultados
    panel_resultados = uipanel(fig, 'Title', 'RESULTADOS', ...
        'Position', [650, 300, 570, 210], ...
        'FontSize', 14, 'FontWeight', 'bold', ...
        'BackgroundColor', [0.13, 0.13, 0.13], ...
        'ForegroundColor', [0.3, 0.6, 1]);
    texto_resultados = uitextarea(panel_resultados, ...
        'Position', [10, 10, 550, 170], ...
        'Editable', 'off', ...
        'FontSize', 13, ...
        'FontColor', 'white', ...
        'BackgroundColor', [0.18, 0.18, 0.18]);

    % Panel de gráfica
    panel_grafica = uipanel(fig, 'Title', '', ...
        'Position', [30, 30, 1220, 250], ...
        'BackgroundColor', [0.13, 0.13, 0.13], ...
        'ForegroundColor', [0.3, 0.6, 1]);
    axes_grafica = uiaxes(panel_grafica, ...
        'Position', [40, 30, 1140, 190], ...
        'BackgroundColor', [0.18, 0.18, 0.18], ...
        'XColor', 'white', 'YColor', 'white', ...
        'FontSize', 13);
    text(axes_grafica, 0.5, 0.5, 'GRAFICA', ...
        'Units', 'normalized', ...
        'HorizontalAlignment', 'center', ...
        'FontSize', 20, 'Color', [1 1 1 0.2]);

    function calcular()
        expr = campos{2}.Value;
        x0 = campos{4}.Value;
        x1 = campos{6}.Value;
        tol = campos{8}.Value;
        maxit = campos{10}.Value;
        try
            funcion = str2func(['@(x) ' expr]);
            funcion(1); % Validar función
        catch
            texto_resultados.Value = {'Error: La función ingresada no es válida.'};
            return;
        end

        % Inicialización
        xn_1 = x0;
        xn = x1;
        fn_1 = funcion(xn_1);
        fn = funcion(xn);
        error_val = 1;
        iteracion = 0;
        tabla = {};
        tabla{end+1} = sprintf('| %4s | %12s | %12s | %12s | %9s |', ...
            'Iter', 'x_n', 'f(x_n)', 'x_{n+1}', 'Error');

        while (error_val > tol && iteracion < maxit)
            denominador = fn - fn_1;
            if abs(denominador) < 1e-10
                texto_resultados.Value = [tabla, {'Error: División por cero en la iteración.'}];
                return;
            end
            xn_nuevo = xn - fn * (xn - xn_1) / denominador;
            fn_nuevo = funcion(xn_nuevo);
            error_val = abs((xn_nuevo - xn) / max(abs(xn_nuevo), 1));
            tabla{end+1} = sprintf('| %4d | %12.8f | %12.8f | %12.8f | %9.1e |', ...
                iteracion, xn, fn, xn_nuevo, error_val);
            xn_1 = xn;
            xn = xn_nuevo;
            fn_1 = fn;
            fn = fn_nuevo;
            iteracion = iteracion + 1;
            if abs(fn) < 1e-15
                break;
            end
        end

        % Resultado final
        if error_val <= tol
            tabla{end+1} = sprintf('Convergencia alcanzada en %d iteraciones. Raíz: %.10f', iteracion, xn);
        elseif iteracion >= maxit
            tabla{end+1} = sprintf('No se alcanzó la tolerancia en %d iteraciones. Último valor: %.10f', iteracion, xn);
        end
        texto_resultados.Value = tabla;

        % Preguntar si graficar
        selection = uiconfirm(fig, '¿Desea graficar la función y la raíz encontrada?', ...
            'Graficar', 'Options', {'Sí','No'}, 'DefaultOption',2,'CancelOption',2);
        if strcmp(selection, 'Sí')
            graficarFuncion(funcion, xn, expr);
        else
            cla(axes_grafica);
            text(axes_grafica, 0.5, 0.5, 'GRAFICA', ...
                'Units', 'normalized', ...
                'HorizontalAlignment', 'center', ...
                'FontSize', 20, 'Color', [1 1 1 0.2]);
        end
    end

    function graficarFuncion(funcion, xn, strFuncion)
        x = linspace(xn-2, xn+2, 1000);
        y = arrayfun(funcion, x);
        y(y > 10) = 10;
        y(y < -10) = -10;
        plot(axes_grafica, x, y, 'b-', 'LineWidth', 2);
        hold(axes_grafica, 'on');
        plot(axes_grafica, [xn-2, xn+2], [0, 0], 'k--');
        plot(axes_grafica, xn, 0, 'ro', 'MarkerSize', 10, 'MarkerFaceColor', 'r');
        text(axes_grafica, xn, 0.5, ['Raíz: x = ' num2str(xn)], 'FontSize', 12, 'Color', 'white');
        hold(axes_grafica, 'off');
        title(axes_grafica, ['Función: f(x) = ' strFuncion], 'Color', 'white');
        xlabel(axes_grafica, 'x');
        ylabel(axes_grafica, 'f(x)');
        grid(axes_grafica, 'on');
    end
end