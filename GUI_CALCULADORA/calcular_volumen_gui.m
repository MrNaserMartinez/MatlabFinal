function calcular_volumen_gui()
% CALCULADORA_VOLUMENES_GUI Interfaz gr√°fica mejorada con modo oscuro
% Esta funci√≥n crea una GUI moderna y redimensionable para calcular vol√∫menes

    % Variables globales para los controles y tema
    global edit_inputs text_resultado text_formula text_info current_figure;
    global uipanel_seleccion uipanel_formula uipanel_datos uipanel_resultados uipanel_controles;
    global dark_mode theme_colors;
    
    current_figure = 'cubo';
    dark_mode = true; % Empezar en modo oscuro
    
    % Definir colores para ambos temas
    setup_theme_colors();
    
    % Crear la figura principal con redimensionamiento
    fig = figure('Name', 'Calculadora de Vol√∫menes - Modo Oscuro', ...
                 'Position', [100, 100, 900, 750], ...
                 'Resize', 'on', ...
                 'Color', theme_colors.bg_main, ...
                 'MenuBar', 'none', ...
                 'ToolBar', 'none', ...
                 'SizeChangedFcn', @resize_callback, ...
                 'CloseRequestFcn', @close_callback);
    
    % T√≠tulo principal
    title_text = uicontrol('Style', 'text', ...
        'String', 'üîÆ CALCULADORA DE VOL√öMENES', ...
        'Units', 'normalized', ...
        'Position', [0.05, 0.92, 0.7, 0.06], ...
        'FontSize', 16, ...
        'FontWeight', 'bold', ...
        'BackgroundColor', theme_colors.bg_main, ...
        'ForegroundColor', theme_colors.text_title, ...
        'HorizontalAlignment', 'left');
    
    % Switch para cambiar tema
    theme_switch = uicontrol('Style', 'togglebutton', ...
        'String', 'üåô Modo Claro', ...
        'Units', 'normalized', ...
        'Position', [0.8, 0.92, 0.15, 0.06], ...
        'FontSize', 10, ...
        'FontWeight', 'bold', ...
        'BackgroundColor', theme_colors.button_bg, ...
        'ForegroundColor', theme_colors.text_primary, ...
        'Value', dark_mode, ...
        'Callback', @toggle_theme);
    
    % Panel de selecci√≥n de figura con mejor dise√±o
    uipanel_seleccion = uipanel('Title', 'üìê Seleccionar Figura 3D', ...
        'Units', 'normalized', ...
        'Position', [0.02, 0.75, 0.96, 0.15], ...
        'BackgroundColor', theme_colors.panel_bg, ...
        'ForegroundColor', theme_colors.text_primary, ...
        'FontSize', 11, ...
        'FontWeight', 'bold', ...
        'BorderType', 'line', ...
        'HighlightColor', theme_colors.border);
    
    create_figure_buttons();
    
    % Panel de f√≥rmula mejorado
    uipanel_formula = uipanel('Title', 'üìä F√≥rmula Matem√°tica', ...
        'Units', 'normalized', ...
        'Position', [0.02, 0.62, 0.96, 0.11], ...
        'BackgroundColor', theme_colors.panel_bg, ...
        'ForegroundColor', theme_colors.text_primary, ...
        'FontSize', 11, ...
        'FontWeight', 'bold', ...
        'BorderType', 'line', ...
        'HighlightColor', theme_colors.border);
    
    text_formula = uicontrol('Parent', uipanel_formula, ...
        'Style', 'text', ...
        'String', 'V = lado¬≥', ...
        'Units', 'normalized', ...
        'Position', [0.02, 0.1, 0.96, 0.7], ...
        'FontSize', 13, ...
        'FontWeight', 'bold', ...
        'BackgroundColor', theme_colors.panel_bg, ...
        'ForegroundColor', theme_colors.text_formula, ...
        'HorizontalAlignment', 'center');
    
    % Panel de entrada de datos mejorado
    uipanel_datos = uipanel('Title', '‚öôÔ∏è Datos de Entrada', ...
        'Units', 'normalized', ...
        'Position', [0.02, 0.35, 0.96, 0.25], ...
        'BackgroundColor', theme_colors.panel_bg, ...
        'ForegroundColor', theme_colors.text_primary, ...
        'FontSize', 11, ...
        'FontWeight', 'bold', ...
        'BorderType', 'line', ...
        'HighlightColor', theme_colors.border);
    
    edit_inputs = {};
    
    % Bot√≥n calcular mejorado
    calc_button = uicontrol('Parent', uipanel_datos, ...
        'Style', 'pushbutton', ...
        'String', 'üßÆ CALCULAR VOLUMEN', ...
        'Units', 'normalized', ...
        'Position', [0.35, 0.1, 0.3, 0.25], ...
        'FontSize', 11, ...
        'FontWeight', 'bold', ...
        'BackgroundColor', theme_colors.button_calc, ...
        'ForegroundColor', theme_colors.text_button, ...
        'Callback', @calcular_volumen_callback);
    
    % Panel de resultados mejorado
    uipanel_resultados = uipanel('Title', 'üìà Resultados del C√°lculo', ...
        'Units', 'normalized', ...
        'Position', [0.02, 0.18, 0.96, 0.15], ...
        'BackgroundColor', theme_colors.panel_bg, ...
        'ForegroundColor', theme_colors.text_primary, ...
        'FontSize', 11, ...
        'FontWeight', 'bold', ...
        'BorderType', 'line', ...
        'HighlightColor', theme_colors.border);
    
    text_resultado = uicontrol('Parent', uipanel_resultados, ...
        'Style', 'text', ...
        'String', '‚ú® Seleccione una figura e ingrese los datos...', ...
        'Units', 'normalized', ...
        'Position', [0.02, 0.55, 0.96, 0.35], ...
        'FontSize', 12, ...
        'FontWeight', 'bold', ...
        'BackgroundColor', theme_colors.result_bg, ...
        'ForegroundColor', theme_colors.text_result, ...
        'HorizontalAlignment', 'center');
    
    text_info = uicontrol('Parent', uipanel_resultados, ...
        'Style', 'text', ...
        'String', '', ...
        'Units', 'normalized', ...
        'Position', [0.02, 0.1, 0.96, 0.35], ...
        'FontSize', 10, ...
        'BackgroundColor', theme_colors.panel_bg, ...
        'ForegroundColor', theme_colors.text_secondary, ...
        'HorizontalAlignment', 'center');
    
    % Panel de controles mejorado
    uipanel_controles = uipanel('Title', 'üõ†Ô∏è Herramientas', ...
        'Units', 'normalized', ...
        'Position', [0.02, 0.02, 0.96, 0.14], ...
        'BackgroundColor', theme_colors.panel_bg, ...
        'ForegroundColor', theme_colors.text_primary, ...
        'FontSize', 11, ...
        'FontWeight', 'bold', ...
        'BorderType', 'line', ...
        'HighlightColor', theme_colors.border);
    
    create_control_buttons();
    
    % Inicializar con cubo
    cambiar_figura('cubo');
    
    % --- FUNCIONES DE CONFIGURACI√ìN ---
    function setup_theme_colors()
        if dark_mode
            % Tema oscuro moderno
            theme_colors.bg_main = [0.12, 0.12, 0.15];
            theme_colors.panel_bg = [0.18, 0.18, 0.22];
            theme_colors.button_bg = [0.25, 0.25, 0.3];
            theme_colors.button_calc = [0.2, 0.6, 0.3];
            theme_colors.result_bg = [0.15, 0.2, 0.15];
            theme_colors.text_primary = [0.9, 0.9, 0.95];
            theme_colors.text_secondary = [0.7, 0.7, 0.8];
            theme_colors.text_title = [0.4, 0.8, 1.0];
            theme_colors.text_formula = [1.0, 0.8, 0.4];
            theme_colors.text_result = [0.4, 1.0, 0.6];
            theme_colors.text_button = [1, 1, 1];
            theme_colors.border = [0.4, 0.4, 0.5];
            theme_colors.edit_bg = [0.25, 0.25, 0.3];
        else
            % Tema claro moderno
            theme_colors.bg_main = [0.96, 0.96, 0.98];
            theme_colors.panel_bg = [1.0, 1.0, 1.0];
            theme_colors.button_bg = [0.9, 0.9, 0.95];
            theme_colors.button_calc = [0.2, 0.7, 0.4];
            theme_colors.result_bg = [0.9, 1.0, 0.9];
            theme_colors.text_primary = [0.1, 0.1, 0.2];
            theme_colors.text_secondary = [0.4, 0.4, 0.5];
            theme_colors.text_title = [0.1, 0.3, 0.8];
            theme_colors.text_formula = [0.6, 0.3, 0.1];
            theme_colors.text_result = [0.1, 0.6, 0.2];
            theme_colors.text_button = [1, 1, 1];
            theme_colors.border = [0.7, 0.7, 0.8];
            theme_colors.edit_bg = [1, 1, 1];
        end
    end
    
    function create_figure_buttons()
        figuras = {'cubo', 'prisma_rectangular', 'cilindro', 'cono', ...
                   'esfera', 'piramide', 'tronco_cono', 'prisma_triangular'};
        nombres = {'üé≤ Cubo', 'üì¶ Prisma Rect.', 'ü•´ Cilindro', 'üç¶ Cono', ...
                   '‚öΩ Esfera', 'üî∫ Pir√°mide', 'ü™£ Tronco Cono', 'üîª Prisma Triang.'};
        colores = {[1.0, 0.7, 0.5], [0.7, 1.0, 0.5], [0.5, 0.7, 1.0], [1.0, 0.5, 0.7], ...
                   [0.7, 0.5, 1.0], [1.0, 1.0, 0.5], [0.5, 1.0, 1.0], [1.0, 0.7, 0.7]};
        
        for i = 1:8
            row = floor((i-1)/4);
            col = mod(i-1, 4);
            x = 0.02 + col * 0.24;
            y = 0.6 - row * 0.45;
            
            color = colores{i};
            if dark_mode
                color = color * 0.7; % Oscurecer colores en modo oscuro
            end
            
            uicontrol('Parent', uipanel_seleccion, ...
                'Style', 'pushbutton', ...
                'String', nombres{i}, ...
                'Units', 'normalized', ...
                'Position', [x, y, 0.22, 0.35], ...
                'FontSize', 9, ...
                'FontWeight', 'bold', ...
                'BackgroundColor', color, ...
                'ForegroundColor', theme_colors.text_primary, ...
                'Callback', @(src,evt) cambiar_figura(figuras{i}));
        end
    end
    
    function create_control_buttons()
        botones = {{'üìã Mostrar F√≥rmulas', @mostrar_todas_formulas, [0.7, 0.7, 1.0]}, ...
                   {'üßπ Limpiar', @limpiar_campos, [1.0, 0.8, 0.6]}, ...
                   {'‚ùå Salir', @(~,~) close(fig), [1.0, 0.6, 0.6]}};
        
        for i = 1:3
            x = 0.1 + (i-1) * 0.25;
            color = botones{i}{3};
            if dark_mode
                color = color * 0.8;
            end
            
            uicontrol('Parent', uipanel_controles, ...
                'Style', 'pushbutton', ...
                'String', botones{i}{1}, ...
                'Units', 'normalized', ...
                'Position', [x, 0.3, 0.2, 0.4], ...
                'FontSize', 10, ...
                'FontWeight', 'bold', ...
                'BackgroundColor', color, ...
                'ForegroundColor', theme_colors.text_primary, ...
                'Callback', botones{i}{2});
        end
    end
    
    % --- FUNCIONES PRINCIPALES ---
    function toggle_theme(src, ~)
        dark_mode = get(src, 'Value');
        setup_theme_colors();
        update_all_colors();
        
        if dark_mode
            set(src, 'String', '‚òÄÔ∏è Modo Claro');
            set(fig, 'Name', 'Calculadora de Vol√∫menes - Modo Oscuro');
        else
            set(src, 'String', 'üåô Modo Oscuro');
            set(fig, 'Name', 'Calculadora de Vol√∫menes - Modo Claro');
        end
    end
    
    function update_all_colors()
        % Actualizar figura principal
        set(fig, 'Color', theme_colors.bg_main);
        
        % Actualizar todos los elementos
        all_children = findall(fig);
        for i = 1:length(all_children)
            obj = all_children(i);
            if isprop(obj, 'BackgroundColor') && isprop(obj, 'Type')
                switch get(obj, 'Type')
                    case 'uipanel'
                        set(obj, 'BackgroundColor', theme_colors.panel_bg);
                        set(obj, 'ForegroundColor', theme_colors.text_primary);
                    case 'uicontrol'
                        style = get(obj, 'Style');
                        if strcmp(style, 'text')
                            parent = get(obj, 'Parent');
                            if obj == text_resultado
                                set(obj, 'BackgroundColor', theme_colors.result_bg);
                                set(obj, 'ForegroundColor', theme_colors.text_result);
                            elseif obj == text_formula
                                set(obj, 'BackgroundColor', theme_colors.panel_bg);
                                set(obj, 'ForegroundColor', theme_colors.text_formula);
                            else
                                set(obj, 'BackgroundColor', theme_colors.panel_bg);
                                set(obj, 'ForegroundColor', theme_colors.text_primary);
                            end
                        elseif strcmp(style, 'edit')
                            set(obj, 'BackgroundColor', theme_colors.edit_bg);
                            set(obj, 'ForegroundColor', theme_colors.text_primary);
                        end
                end
            end
        end
        
        % Recrear botones con nuevos colores
        delete(get(uipanel_seleccion, 'Children'));
        delete(get(uipanel_controles, 'Children'));
        create_figure_buttons();
        create_control_buttons();
        
        % Recrear bot√≥n calcular
        calc_button = uicontrol('Parent', uipanel_datos, ...
            'Style', 'pushbutton', ...
            'String', 'üßÆ CALCULAR VOLUMEN', ...
            'Units', 'normalized', ...
            'Position', [0.35, 0.1, 0.3, 0.25], ...
            'FontSize', 11, ...
            'FontWeight', 'bold', ...
            'BackgroundColor', theme_colors.button_calc, ...
            'ForegroundColor', theme_colors.text_button, ...
            'Callback', @calcular_volumen_callback);
    end
    
    function cambiar_figura(tipo)
        current_figure = tipo;
        
        % Limpiar campos anteriores
        for i = 1:length(edit_inputs)
            if ishandle(edit_inputs{i}.label)
                delete(edit_inputs{i}.label);
            end
            if ishandle(edit_inputs{i}.edit)
                delete(edit_inputs{i}.edit);
            end
        end
        edit_inputs = {};
        
        % Configurar f√≥rmula y campos seg√∫n el tipo
        switch tipo
            case 'cubo'
                set(text_formula, 'String', 'V = lado¬≥');
                crear_campo('üìè Lado:', 0.1, 0.7);
                
            case 'prisma_rectangular'
                set(text_formula, 'String', 'V = largo √ó ancho √ó altura');
                crear_campo('üìê Largo:', 0.05, 0.7);
                crear_campo('üìê Ancho:', 0.35, 0.7);
                crear_campo('üìê Altura:', 0.65, 0.7);
                
            case 'cilindro'
                set(text_formula, 'String', 'V = œÄ √ó radio¬≤ √ó altura');
                crear_campo('‚≠ï Radio:', 0.15, 0.7);
                crear_campo('üìê Altura:', 0.55, 0.7);
                
            case 'cono'
                set(text_formula, 'String', 'V = (1/3) √ó œÄ √ó radio¬≤ √ó altura');
                crear_campo('‚≠ï Radio:', 0.15, 0.7);
                crear_campo('üìê Altura:', 0.55, 0.7);
                
            case 'esfera'
                set(text_formula, 'String', 'V = (4/3) √ó œÄ √ó radio¬≥');
                crear_campo('‚≠ï Radio:', 0.35, 0.7);
                
            case 'piramide'
                set(text_formula, 'String', 'V = (1/3) √ó √°rea_base √ó altura');
                crear_campo('üìä √Årea base:', 0.15, 0.7);
                crear_campo('üìê Altura:', 0.55, 0.7);
                
            case 'tronco_cono'
                set(text_formula, 'String', 'V = (1/3) √ó œÄ √ó h √ó (r‚ÇÅ¬≤ + r‚ÇÅ√ór‚ÇÇ + r‚ÇÇ¬≤)');
                crear_campo('‚≠ï Radio mayor:', 0.05, 0.7);
                crear_campo('‚≠ï Radio menor:', 0.35, 0.7);
                crear_campo('üìê Altura:', 0.65, 0.7);
                
            case 'prisma_triangular'
                set(text_formula, 'String', 'V = (1/2) √ó base √ó altura_base √ó longitud');
                crear_campo('üìê Base ‚ñ≥:', 0.05, 0.7);
                crear_campo('üìê Altura ‚ñ≥:', 0.35, 0.7);
                crear_campo('üìê Longitud:', 0.65, 0.7);
        end
        
        % Limpiar resultados
        set(text_resultado, 'String', '‚ú® Ingrese los datos y presione calcular...');
        set(text_info, 'String', '');
    end
    
    function crear_campo(etiqueta, x, y)
        n = length(edit_inputs) + 1;
        
        edit_inputs{n}.label = uicontrol('Parent', uipanel_datos, ...
            'Style', 'text', ...
            'String', etiqueta, ...
            'Units', 'normalized', ...
            'Position', [x, y, 0.25, 0.15], ...
            'FontSize', 9, ...
            'FontWeight', 'bold', ...
            'BackgroundColor', theme_colors.panel_bg, ...
            'ForegroundColor', theme_colors.text_primary, ...
            'HorizontalAlignment', 'left');
        
        edit_inputs{n}.edit = uicontrol('Parent', uipanel_datos, ...
            'Style', 'edit', ...
            'Units', 'normalized', ...
            'Position', [x, y-0.2, 0.25, 0.15], ...
            'FontSize', 10, ...
            'BackgroundColor', theme_colors.edit_bg, ...
            'ForegroundColor', theme_colors.text_primary);
    end
    
    function calcular_volumen_callback(~, ~)
        try
            % Obtener valores de los campos
            valores = [];
            for i = 1:length(edit_inputs)
                valor = str2double(get(edit_inputs{i}.edit, 'String'));
                if isnan(valor)
                    set(text_resultado, 'String', '‚ö†Ô∏è Error: Todos los campos deben contener n√∫meros v√°lidos');
                    set(text_info, 'String', '');
                    return;
                end
                if valor <= 0
                    set(text_resultado, 'String', '‚ö†Ô∏è Error: Todas las dimensiones deben ser positivas');
                    set(text_info, 'String', '');
                    return;
                end
                valores(end+1) = valor;
            end
            
            % Calcular seg√∫n el tipo seleccionado
            [volumen, info_adicional] = calcular_segun_tipo(current_figure, valores);
            
            % Mostrar resultado con formato mejorado
            if volumen < 1
                vol_str = sprintf('%.6f', volumen);
            elseif volumen < 1000
                vol_str = sprintf('%.4f', volumen);
            else
                vol_str = sprintf('%.2f', volumen);
            end
            
            set(text_resultado, 'String', sprintf('üìä Volumen: %s unidades¬≥', vol_str));
            set(text_info, 'String', info_adicional);
            
        catch ME
            set(text_resultado, 'String', '‚ùå Error en el c√°lculo');
            set(text_info, 'String', ME.message);
        end
    end
    
    function [volumen, info] = calcular_segun_tipo(figura, valores)
        info = '';
        
        switch figura
            case 'cubo'
                volumen = valores(1)^3;
                area_superficie = 6 * valores(1)^2;
                diagonal = valores(1) * sqrt(3);
                info = sprintf('üìê √Årea superficie: %.4f | üî∑ Diagonal: %.4f', area_superficie, diagonal);
                
            case 'prisma_rectangular'
                volumen = valores(1) * valores(2) * valores(3);
                area_superficie = 2 * (valores(1)*valores(2) + valores(1)*valores(3) + valores(2)*valores(3));
                info = sprintf('üìè Dimensiones: %.2f √ó %.2f √ó %.2f | üìê √Årea superficie: %.4f', ...
                              valores(1), valores(2), valores(3), area_superficie);
                
            case 'cilindro'
                volumen = pi * valores(1)^2 * valores(2);
                area_superficie = 2 * pi * valores(1) * (valores(1) + valores(2));
                info = sprintf('‚≠ï Radio: %.2f | üìê Altura: %.2f | üìê √Årea superficie: %.4f', ...
                              valores(1), valores(2), area_superficie);
                
            case 'cono'
                volumen = (1/3) * pi * valores(1)^2 * valores(2);
                generatriz = sqrt(valores(1)^2 + valores(2)^2);
                area_superficie = pi * valores(1) * (valores(1) + generatriz);
                info = sprintf('‚≠ï Radio: %.2f | üìê Altura: %.2f | üìè Generatriz: %.4f | üìê √Årea: %.4f', ...
                              valores(1), valores(2), generatriz, area_superficie);
                
            case 'esfera'
                volumen = (4/3) * pi * valores(1)^3;
                area_superficie = 4 * pi * valores(1)^2;
                diametro = 2 * valores(1);
                info = sprintf('‚≠ï Radio: %.2f | üî∑ Di√°metro: %.2f | üìê √Årea superficie: %.4f', ...
                              valores(1), diametro, area_superficie);
                
            case 'piramide'
                volumen = (1/3) * valores(1) * valores(2);
                info = sprintf('üìä √Årea base: %.2f | üìê Altura: %.2f', valores(1), valores(2));
                
            case 'tronco_cono'
                volumen = (1/3) * pi * valores(3) * (valores(1)^2 + valores(1)*valores(2) + valores(2)^2);
                info = sprintf('‚≠ï Radio mayor: %.2f | ‚≠ï Radio menor: %.2f | üìê Altura: %.2f', ...
                              valores(1), valores(2), valores(3));
                
            case 'prisma_triangular'
                area_base = 0.5 * valores(1) * valores(2);
                volumen = area_base * valores(3);
                info = sprintf('üìê Base: %.2f | üìê Altura ‚ñ≥: %.2f | üìê Longitud: %.2f | üìä √Årea base: %.4f', ...
                              valores(1), valores(2), valores(3), area_base);
        end
    end
    
    function mostrar_todas_formulas(~, ~)
        formulas_msg = sprintf(['üìê F√ìRMULAS DE VOLUMEN üìê\n\n' ...
            'üé≤ Cubo: V = lado¬≥\n' ...
            'üì¶ Prisma rectangular: V = largo √ó ancho √ó altura\n' ...
            'ü•´ Cilindro: V = œÄ √ó radio¬≤ √ó altura\n' ...
            'üç¶ Cono: V = (1/3) √ó œÄ √ó radio¬≤ √ó altura\n' ...
            '‚öΩ Esfera: V = (4/3) √ó œÄ √ó radio¬≥\n' ...
            'üî∫ Pir√°mide: V = (1/3) √ó √°rea_base √ó altura\n' ...
            'ü™£ Tronco de cono: V = (1/3) √ó œÄ √ó h √ó (r‚ÇÅ¬≤ + r‚ÇÅ√ór‚ÇÇ + r‚ÇÇ¬≤)\n' ...
            'üîª Prisma triangular: V = (1/2) √ó base √ó altura_base √ó longitud\n\n' ...
            'üí° Todas las dimensiones deben ser positivas\n' ...
            'üìä Los resultados incluyen informaci√≥n adicional']);
        
        msgbox(formulas_msg, 'üìê F√≥rmulas de Volumen', 'help');
    end
    
    function limpiar_campos(~, ~)
        for i = 1:length(edit_inputs)
            set(edit_inputs{i}.edit, 'String', '');
        end
        set(text_resultado, 'String', 'üßπ Campos limpiados. Ingrese nuevos datos...');
        set(text_info, 'String', '');
    end
    
    function resize_callback(~, ~)
        % La funci√≥n se ejecuta autom√°ticamente al redimensionar
        % Los elementos con 'Units' = 'normalized' se ajustan autom√°ticamente
    end
    
    function close_callback(~, ~)
        selection = questdlg('¬øEst√° seguro que desea cerrar la calculadora?', ...
                           'Confirmar Cierre', ...
                           'S√≠', 'No', 'No');
        if strcmp(selection, 'S√≠')
            delete(fig);
        end
    end
end